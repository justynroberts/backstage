---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-service
  title: Python Microservice
  description: Scaffold a production-ready Python service with FastAPI/Flask
spec:
  type: service
  parameters:
    - title: Python Service Setup
      properties:
        name:
          title: Service Name
          type: string
          description: kebab-case name for the service
        repo_name:
          title: Repository Name
          type: string
          description: Name of the Git repository
        framework:
          title: Web Framework
          type: string
          enum: [fastapi, flask, django]
          default: fastapi
        python_version:
          title: Python Version
          type: string
          default: "3.11"
  steps:
    - id: scaffold
      name: Generate Codebase
      action: fetch:template
      input:
        url: ./templates/python-service
        values:
          name: "{{ parameters.name }}"
          framework: "{{ parameters.framework }}"
          python_version: "{{ parameters.python_version }}"
    - id: repo
      name: Create Repository
      action: github:repo:create
      input:
        repo: "{{ parameters.repo_name }}"
        owner: "my-org"
        visibility: public
    - id: push
      name: Push Code to Repository
      action: github:repo:push
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
    - id: ci
      name: Setup CI/CD Pipeline
      action: github:actions:setup
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
        workflow: "python-ci.yml"
    - id: register
      name: Register in Backstage
      action: catalog:register
      input:
        catalogInfoUrl: "github.com/my-org/{{ parameters.repo_name }}/catalog-info.yaml"

---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nodejs-service
  title: Node.js Service
  description: Scaffold a TypeScript Node.js service with Express/NestJS
spec:
  type: service
  parameters:
    - title: Node.js Setup
      properties:
        name:
          title: Service Name
          type: string
        repo_name:
          title: Repository Name
          type: string
          description: Name of the Git repository
        package_manager:
          title: Package Manager
          type: string
          enum: [npm, yarn, pnpm]
          default: npm
        framework:
          title: Framework
          type: string
          enum: [express, nestjs, hapi]
          default: express
  steps:
    - id: scaffold
      name: Generate Codebase
      action: fetch:template
      input:
        url: ./templates/node-service
        values:
          name: "{{ parameters.name }}"
          package_manager: "{{ parameters.package_manager }}"
          framework: "{{ parameters.framework }}"
    - id: repo
      name: Create Repository
      action: github:repo:create
      input:
        repo: "{{ parameters.repo_name }}"
        owner: "my-org"
        visibility: public
    - id: push
      name: Push Code to Repository
      action: github:repo:push
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
    - id: ci
      name: Setup CI/CD Pipeline
      action: github:actions:setup
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
        workflow: "node-ci.yml"
    - id: register
      name: Register in Backstage
      action: catalog:register
      input:
        catalogInfoUrl: "github.com/my-org/{{ parameters.repo_name }}/catalog-info.yaml"

---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-module
  title: Terraform Module
  description: Scaffold a reusable Terraform module with best practices
spec:
  type: library
  parameters:
    - title: Terraform Setup
      properties:
        name:
          title: Module Name
          type: string
        repo_name:
          title: Repository Name
          type: string
          description: Name of the Git repository
        cloud:
          title: Cloud Provider
          type: string
          enum: [aws, gcp, azure, multi-cloud]
          default: aws
        terraform_version:
          title: Terraform Version
          type: string
          default: "1.6"
  steps:
    - id: scaffold
      name: Generate Codebase
      action: fetch:template
      input:
        url: ./templates/terraform-module
        values:
          name: "{{ parameters.name }}"
          cloud: "{{ parameters.cloud }}"
          terraform_version: "{{ parameters.terraform_version }}"
    - id: repo
      name: Create Repository
      action: github:repo:create
      input:
        repo: "{{ parameters.repo_name }}"
        owner: "my-org"
        visibility: public
    - id: push
      name: Push Code to Repository
      action: github:repo:push
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
    - id: ci
      name: Setup CI/CD Pipeline
      action: github:actions:setup
      input:
        repoUrl: "github.com/my-org/{{ parameters.repo_name }}"
        workflow: "terraform-ci.yml"
    - id: register
      name: Register in Backstage
      action: catalog:register
      input:
        catalogInfoUrl: "github.com/my-org/{{ parameters.repo_name }}/catalog-info.yaml"
